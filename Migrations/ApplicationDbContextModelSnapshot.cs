// <auto-generated />
using System;
using FakeBK.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FakeBK.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FakeBK.Models.Class", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("class_pkey");

                    b.ToTable("class", (string)null);
                });

            modelBuilder.Entity("FakeBK.Models.Course", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric")
                        .HasColumnName("id");

                    b.Property<decimal?>("DeptId")
                        .HasColumnType("numeric")
                        .HasColumnName("dept_id");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("course_pkey");

                    b.HasIndex("DeptId");

                    b.ToTable("course", (string)null);
                });

            modelBuilder.Entity("FakeBK.Models.Department", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric")
                        .HasColumnName("id");

                    b.Property<decimal?>("HeadteachId")
                        .HasColumnType("numeric")
                        .HasColumnName("headteach_id");

                    b.HasKey("Id")
                        .HasName("department_pkey");

                    b.HasIndex("HeadteachId");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("FakeBK.Models.Orgperson", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("orgperson_pkey");

                    b.ToTable("orgperson", (string)null);
                });

            modelBuilder.Entity("FakeBK.Models.Relative", b =>
                {
                    b.Property<decimal>("OrgpId")
                        .HasColumnType("numeric")
                        .HasColumnName("orgp_id");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("OrgpId", "Name")
                        .HasName("relative_pkey");

                    b.ToTable("relative", (string)null);
                });

            modelBuilder.Entity("FakeBK.Models.Student", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric")
                        .HasColumnName("id");

                    b.Property<decimal>("ClassId")
                        .HasColumnType("numeric")
                        .HasColumnName("class_id");

                    b.Property<decimal>("OrgpId")
                        .HasColumnType("numeric")
                        .HasColumnName("orgp_id");

                    b.HasKey("Id")
                        .HasName("student_pkey");

                    b.HasIndex("ClassId");

                    b.HasIndex("OrgpId");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("FakeBK.Models.Teachclass", b =>
                {
                    b.Property<decimal>("ClassId")
                        .HasColumnType("numeric")
                        .HasColumnName("class_id");

                    b.Property<decimal>("CourseId")
                        .HasColumnType("numeric")
                        .HasColumnName("course_id");

                    b.Property<decimal>("TeacherId")
                        .HasColumnType("numeric")
                        .HasColumnName("teacher_id");

                    b.HasKey("ClassId", "CourseId")
                        .HasName("teachclass_pkey");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("teachclass", (string)null);
                });

            modelBuilder.Entity("FakeBK.Models.Teacher", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric")
                        .HasColumnName("id");

                    b.Property<decimal?>("DeptId")
                        .HasColumnType("numeric")
                        .HasColumnName("dept_id");

                    b.Property<decimal>("OrgpId")
                        .HasColumnType("numeric")
                        .HasColumnName("orgp_id");

                    b.HasKey("Id")
                        .HasName("teacher_pkey");

                    b.HasIndex("DeptId");

                    b.HasIndex("OrgpId");

                    b.ToTable("teacher", (string)null);
                });

            modelBuilder.Entity("Grade", b =>
                {
                    b.Property<decimal>("StudentId")
                        .HasColumnType("numeric")
                        .HasColumnName("student_id");

                    b.Property<decimal>("CourseId")
                        .HasColumnType("numeric")
                        .HasColumnName("course_id");

                    b.HasKey("StudentId", "CourseId")
                        .HasName("grade_pkey");

                    b.HasIndex("CourseId");

                    b.ToTable("grade", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FakeBK.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SSN")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("FakeBK.Models.Course", b =>
                {
                    b.HasOne("FakeBK.Models.Department", "Dept")
                        .WithMany("Courses")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("course_dept_id_fkey");

                    b.Navigation("Dept");
                });

            modelBuilder.Entity("FakeBK.Models.Department", b =>
                {
                    b.HasOne("FakeBK.Models.Teacher", "Headteach")
                        .WithMany("Departments")
                        .HasForeignKey("HeadteachId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_head_dept");

                    b.Navigation("Headteach");
                });

            modelBuilder.Entity("FakeBK.Models.Relative", b =>
                {
                    b.HasOne("FakeBK.Models.Orgperson", "Orgp")
                        .WithMany("Relatives")
                        .HasForeignKey("OrgpId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("relative_orgp_id_fkey");

                    b.Navigation("Orgp");
                });

            modelBuilder.Entity("FakeBK.Models.Student", b =>
                {
                    b.HasOne("FakeBK.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("student_class_id_fkey");

                    b.HasOne("FakeBK.Models.Orgperson", "Orgp")
                        .WithMany("Students")
                        .HasForeignKey("OrgpId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("student_orgp_id_fkey");

                    b.Navigation("Class");

                    b.Navigation("Orgp");
                });

            modelBuilder.Entity("FakeBK.Models.Teachclass", b =>
                {
                    b.HasOne("FakeBK.Models.Class", "Class")
                        .WithMany("Teachclasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("teachclass_class_id_fkey");

                    b.HasOne("FakeBK.Models.Course", "Course")
                        .WithMany("Teachclasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("teachclass_course_id_fkey");

                    b.HasOne("FakeBK.Models.Teacher", "Teacher")
                        .WithMany("Teachclasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("teachclass_teacher_id_fkey");

                    b.Navigation("Class");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FakeBK.Models.Teacher", b =>
                {
                    b.HasOne("FakeBK.Models.Department", "Dept")
                        .WithMany("Teachers")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("teacher_dept_id_fkey");

                    b.HasOne("FakeBK.Models.Orgperson", "Orgp")
                        .WithMany("Teachers")
                        .HasForeignKey("OrgpId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("teacher_orgp_id_fkey");

                    b.Navigation("Dept");

                    b.Navigation("Orgp");
                });

            modelBuilder.Entity("Grade", b =>
                {
                    b.HasOne("FakeBK.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("grade_course_id_fkey");

                    b.HasOne("FakeBK.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("grade_student_id_fkey");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FakeBK.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachclasses");
                });

            modelBuilder.Entity("FakeBK.Models.Course", b =>
                {
                    b.Navigation("Teachclasses");
                });

            modelBuilder.Entity("FakeBK.Models.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("FakeBK.Models.Orgperson", b =>
                {
                    b.Navigation("Relatives");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("FakeBK.Models.Teacher", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Teachclasses");
                });
#pragma warning restore 612, 618
        }
    }
}
